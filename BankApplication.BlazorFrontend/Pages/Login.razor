@page "/login"
@inject IUserManagmentService UserManagmentService
@inject NavigationManager NavigationManager
@inject IAlertService AlertService
@inject ILocalStorageService LocalStorageService
<UnloggedNav></UnloggedNav>
<div class="container-fluid p-5">
    <div class="d-flex justify-content-center row">
        <div class="col-xl-6">
            <div class="card">
                <h4 class="card-header">Logowanie</h4>
                <div class="card-body">
                    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label>Login</label>
                            <InputText @bind-Value="model.login" class="form-control" />
                            <ValidationMessage For="@(() => model.login)" />
                        </div>
                        <div class="form-group">
                            <label>Hasło</label>
                            <InputText @bind-Value="model.password" type="password" class="form-control" />
                            <ValidationMessage For="@(() => model.password)" />
                        </div>
                        <button disabled="@loading" class="btn btn-primary">
                            @if (loading)
                            {
                                <span class="spinner-border spinner-border-sm mr-1"></span>
                            }
                            Zaloguj
                        </button>
                        <NavLink href="register" class="btn btn-link">Rejestracja</NavLink>
                    </EditForm>
                </div>
            </div>

        </div>
    </div>
</div>
@code {
    private Models.LoginModel model = new Models.LoginModel();
    private bool loading;

    protected override async void OnInitialized()
    {
        if (await LocalStorageService.GetItem<Models.StorageUserModel>("user") != null)
        {
            await UserManagmentService.Logout();
        }
    }

    private async Task OnValidSubmit()
    {
        AlertService.Clear();
        loading = true;
        try
        {
            await UserManagmentService.Login(model);
            if (await LocalStorageService.GetItem<Models.StorageUserModel>("user") != null)
            { 
            await Task.Delay(50);
            NavigationManager.NavigateTo("dashboard");
        }
            else
        {
            AlertService.Error("Sprawdź wprowadzone dane!");
        }
        loading = false;
    }
        catch (Exception ex)
        {
            AlertService.Error("Nie udało się zalogować!");
            loading = false;
            StateHasChanged();
}

    }
}

