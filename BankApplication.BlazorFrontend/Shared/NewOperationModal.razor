@inject IApiComunicationService ApiComunicationService
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@inject IUserManagmentService UserManagmentService
@inject NavigationManager NavigationManager
@inject IAlertService AlertService
@inject ILocalStorageService LocalStorageService

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Szczegóły przelewu</h5>
            </div>
            <!--  <div class="modal-body">
         <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
             <DataAnnotationsValidator />
             <div class="form-group">
                 <label>Tytuł przelewu: </label>
                 <InputText @bind-Value="model.Title" class="form-control" />
                 <ValidationMessage For="@(() => model.Title)" />
             </div>
             <div class="form-group">
                 <label>Nazwisko</label>
                 <InputNumber @bind-Value="model.Value" class="form-control" />
                 <ValidationMessage For="@(() => model.Value)" />
             </div>
             <div class="form-group">
                 <label>Narodowość</label>
                 <InputText @bind-Value="model.Nationality" class="form-control" />
                 <ValidationMessage For="@(() => model.Nationality)" />
             </div>
             <div class="form-group">
                 <label>Miejsce urodzenia</label>
                 <InputText @bind-Value="model.PlaceOfBirth" class="form-control" />
                 <ValidationMessage For="@(() => model.PlaceOfBirth)" />
             </div>
             <div class="form-group">
                 <label>Data urodzenia</label>
                 <InputDate @bind-Value="model.DateOfBirth" class="form-control" />
                 <ValidationMessage For="@(() => model.DateOfBirth)" />
             </div>
             <div class="form-group">
                 <label>PESEL</label>
                 <InputText @bind-Value="model.PIN" class="form-control" />
                 <ValidationMessage For="@(() => model.PIN)" />
             </div>
             <div class="form-group">
                 <label>Numer telefonu</label>
                 <InputText @bind-Value="model.PhoneNumber" class="form-control" />
                 <ValidationMessage For="@(() => model.PhoneNumber)" />
             </div>
             <div class="form-group">
                 <label>E-mail</label>
                 <InputText @bind-Value="model.Email" class="form-control" />
                 <ValidationMessage For="@(() => model.Email)" />
             </div>
             <div class="form-group">
                 <label>Numer dokumentu tożsamości</label>
                 <InputText @bind-Value="model.IdentityDocumentNumber" class="form-control" />
                 <ValidationMessage For="@(() => model.IdentityDocumentNumber)" />
             </div>
             <div class="form-group">
                 <label>Data ważności dokumentu tożsamości</label>
                 <InputDate @bind-Value="model.IdentityDocumentExpirationDate" class="form-control" />
                 <ValidationMessage For="@(() => model.IdentityDocumentExpirationDate)" />
             </div>
             <hr>
             <p>Adres: </p>
             <hr>
             <div class="form-group">
                 <label>Kraj</label>
                 <InputText @bind-Value="address.Country" class="form-control" />
                 <ValidationMessage For="@(() => address.Country)" />
             </div>
             <div class="form-group">
                 <label>Miasto</label>
                 <InputText @bind-Value="address.City" class="form-control" />
                 <ValidationMessage For="@(() => address.City)" />
             </div>
             <div class="form-group">
                 <label>Ulica</label>
                 <InputText @bind-Value="address.Street" class="form-control" />
                 <ValidationMessage For="@(() => address.Street)" />
             </div>
             <div class="form-group">
                 <label>Nr domu</label>
                 <InputText @bind-Value="address.UnitNumber" class="form-control" />
                 <ValidationMessage For="@(() => address.UnitNumber)" />
             </div>
             <div class="form-group">
                 <label>Kod pocztowy</label>
                 <InputText @bind-Value="address.PostCode" class="form-control" />
                 <ValidationMessage For="@(() => address.PostCode)" />
             </div>
             <hr>
             <p>Dane logowania: </p>
             <hr>
             <div class="form-group">
                 <label>Login</label>
                 <InputText @bind-Value="model.Login" class="form-control" />
                 <ValidationMessage For="@(() => model.Login)" />
             </div>
             <div class="form-group">
                 <label>Hasło</label>
                 <InputText @bind-Value="model.Password" type="password" class="form-control" />
                 <ValidationMessage For="@(() => model.Password)" />
             </div>
             <button disabled="@loading" class="btn btn-primary">
                 @if (loading)
                 {
                     <span class="spinner-border spinner-border-sm mr-1"></span>
                 }
                 Zarejestruj
             </button>
         </EditForm>
     </div>-->

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Zamknij</button>
            </div>
        </div>
    </div>
</div>

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    private OperationModel model = new OperationModel();
    private bool loading;

    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    private OperationModel Operation { get; set; } = new OperationModel();
    private string SenderName { get; set; }
    private string RecipientName { get; set; }

    public async void Open(int id)
    {
        await GetOperation(id);

        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    public async Task GetOperation(int id)
    {
        Operation = await ApiComunicationService.Get<OperationModel>(Configuration["BaseUrl"] + "Operations/" + id);
    }

    private async void OnValidSubmit()
    {

        // reset alerts on submit
        AlertService.Clear();
        loading = true;
        try
        {
         
        }
        catch (Exception ex)
        {
           
        }

    }
}
